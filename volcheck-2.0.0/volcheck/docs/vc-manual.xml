<?xml version="1.0"?> <!-- -*- sgml -*- -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<chapter id="vc-manual" xreflabel="Lackey">

<title>Volcheck: a volatile memory tracking tool</title>

<para>To use this tool, you must specify
<option>--tool=volcheck</option> on the Valgrind
command line.</para>


<sect1 id="vc-manual.overview" xreflabel="Overview">
<title>Overview</title>

<para>Volcheck is a simple Valgrind tool that traces the memory loads and 
stores of potentially volatile variables. It centrally focuses on variables 
in the BSS and Data regions of the binary, which the user can then filter 
to only pay attention to volatile variables.</para>

<para>Volcheck is heavily based on the Lackey and None Valgrind tools.</para>

</sect1>


<sect1 id="vc-manual.options" xreflabel="Lackey Command-line Options">
<title>Volcheck Command-line Options</title>

<para>Volcheck-specific command-line options are:</para>

<!-- start of xi:include in the manpage -->
<variablelist id="vc.opts.list">

  <varlistentry id="opt.basic-counts" xreflabel="--basic-counts">
    <term>
      <option><![CDATA[--basic-counts=<no|yes> [default: yes] ]]></option>
    </term>
    <listitem>
      <para>When enabled, Volcheck prints the following statistics and
      information about the execution of the client program:</para>

      <orderedlist>

       <listitem>
        <para>The number of calls to the function specified by the
        <option>--fnname</option> option (the default is
        <computeroutput>main</computeroutput>).
        If the program has had its symbols stripped, the count will always
        be zero.</para>
       </listitem>

       <listitem>
        <para>The number of conditional branches encountered and the
        number and proportion of those taken.</para>
       </listitem>

       <listitem>
        <para>The number of superblocks entered and completed by the
        program.  Note that due to optimisations done by the JIT, this
        is not at all an accurate value.</para>
       </listitem>

       <listitem>
        <para>The number of guest (x86, amd64, ppc, etc.) instructions and IR
        statements executed.  IR is Valgrind's RISC-like intermediate
        representation via which all instrumentation is done.
        </para>
       </listitem>

       <listitem>
        <para>Ratios between some of these counts.</para>
       </listitem>

       <listitem>
        <para>The exit code of the client program.</para>
       </listitem>

      </orderedlist>

    </listitem>
  </varlistentry>

  <varlistentry id="opt.detailed-counts" xreflabel="--detailed-counts">
    <term>
      <option><![CDATA[--detailed-counts=<no|yes> [default: no] ]]></option>
    </term>
    <listitem>
      <para>When enabled, Volcheck prints a table containing counts of loads,
      stores and ALU operations, differentiated by their IR types.
      The IR types are identified by their IR name ("I1", "I8", ... "I128",
      "F32", "F64", and "V128").</para>
    </listitem>
  </varlistentry>

  <varlistentry id="opt.trace-mem" xreflabel="--trace-mem">
    <term>
      <option><![CDATA[--trace-mem=<no|yes> [default: yes] ]]></option>
    </term>
    <listitem>
      <para>When enabled, Volcheck prints the size and address of almost every
      memory access made by the program.  See the comments at the top of
      the file <computeroutput>volcheck/vc_main.c</computeroutput> for details
      about the output format, how it works, and inaccuracies in the address
      trace.  Note that this option produces immense amounts of output.</para>
    </listitem>
  </varlistentry>

  <!-- Volcheck specific flags -->
  <varlistentry id="opt.print-mem-per" xreflabel="--print-mem-per">
    <term>
      <option><![CDATA[--print-mem-per=<no|yes> [default: yes] ]]></option>
    </term>
    <listitem>
      <para>When enabled, Volcheck prints a trace of every variable in BSS and 
      Data area storage, specifies the variable's name and location, as well as 
      if the access is a load or store, and the variable's size. This can grow 
      quickly depending on the size of the program.</para>
    </listitem>
  </varlistentry>

  <varlistentry id="opt.print-mem-summary" xreflabel="--print-mem-summary">
    <term>
      <option><![CDATA[--print-mem-summary=<no|yes> [default: yes] ]]></option>
    </term>
    <listitem>
      <para>When enabled, Volcheck prints an access summary for all variables in 
      BSS and Data segments of the binary. This includes a file location, symbol 
      name of the variable, the variable size, and a count of how many times it 
      was loaded or stored.</para>
    </listitem>
  </varlistentry>

  <varlistentry id="opt.missing-loc-ok" xreflabel="--missing-loc-ok">
    <term>
      <option><![CDATA[--missing-loc-ok=<no|yes> [default: no] ]]></option>
    </term>
    <listitem>
      <para>When enabled, Volcheck will print the traces and summaries of accesses 
      to variables where Valgrind can't identify their original file location. In 
      our experience, we have found setting this flag to true is often necessary to 
      trace global volatile variables when debug flags are not used during compilation.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry id="opt.fnname" xreflabel="--fnname">
    <term>
      <option><![CDATA[--fnname=<name> [default: main] ]]></option>
    </term>
    <listitem>
      <para>Changes the function for which calls are counted when
      <option>--basic-counts=yes</option> is specified.</para>
    </listitem>
  </varlistentry>

</variablelist>
<!-- end of xi:include in the manpage -->

</sect1>

</chapter>
